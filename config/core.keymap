#define ZMK_BEHAVIORS_KEEP_SK
#define ZMK_BEHAVIORS_KEEP_MT
#define ZMK_BEHAVIORS_KEEP_KT
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <7 8>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp A        &kp B        &kp C
                &kp D        &kp E        &kp F
                &kp G        &kp H        &mo 1
            >;

            sensor-bindings = <
                &inc_dec_kp C_VOL_UP C_VOL_DN
            >;
        };

        layer_1 {
            bindings = <
                &kp I    &kp J    &kp K
                &kp L    &kp M    &kp N
                &kp O    &kp P    &mo 2
            >;

            sensor-bindings = <
                &inc_dec_kp PAGE_UP PAGE_DOWN
            >;
        };

        layer_2 {
            bindings = <
                &kp F1       &kp F2       &kp F3
                &kp LEFT     &kp DOWN     &kp RIGHT
                &none        &none        &mo 3
            >;

            sensor-bindings = <
                &inc_dec_kp LEFT RIGHT
            >;
        };

        layer_3 {
            bindings = <
                &bootloader   &bt BT_SEL 1   &bt BT_SEL 2
                &bt BT_SEL 3  &bt BT_DISC    &bt BT_CLR_ALL
                &bt BT_NXT    &bt BT_PRV     &mo 0
            >;

            sensor-bindings = <
                &inc_dec_kp UP DOWN
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <0 1>;
            then-layer = <2>;
        };
    };
};
